#########################################################################################################
# Filename      : nm3_pico_driver.py                                                                    #
# Version       : 0.1.0                                                                                 #
# Description   : Driver for interfacing with the NanoModem V3.2 acoustic modem on Raspberry Pi Pico W. #
#                 Using AES Encryption                                                                  #
# Author        : Dean Rowlett                                                                          #
# Target        : Raspberry Pi Pico W with MicroPython                                                  #
# Interpreter   : MicroPython v1.22.1                                                                   #
# IDE           : Thonny 4.1.4                                                                          #
# Last Updated  : 11th February 2024                                                                    #
#########################################################################################################
from machine import UART, Pin
import time
from ucryptolib import aes
import hashlib
# Global debug flag
debug = False

def debug_print(message):
    if debug:
        print(message)
        
class NM3Driver:
    def __init__(self, uart_id=0, baudrate=9600, tx_pin=16, rx_pin=17):
        self.uart = UART(uart_id, baudrate=baudrate)

    def connect(self):
        # Specify TX and RX pins during connection
        self.uart.init(baudrate=9600, bits=8, parity=None, stop=1, tx=Pin(16), rx=Pin(17))

    def send_command(self, command):
        self.uart.write(command.encode('utf-8'))

    def read_response(self, timeout=2):
        end_time = time.ticks_add(time.ticks_ms(), timeout * 1000)
        response = bytearray()
        while time.ticks_diff(end_time, time.ticks_ms()) > 0:
            if self.uart.any():
                byte = self.uart.read()
                response.extend(byte)
                debug_print(f"Data Received: {response}")
                if response.endswith(b'\r\n'):  # End of message
                    break
        return response.decode()


    def get_address(self):
        self.send_command('$?')
        response = self.read_response()
        if not response:
            raise Exception("No Response")
        if response.startswith('#A'):
            addr = response.split('V')[0][2:]
            return int(addr)
        if not response.startswith('#A'):
            raise Exception("Incorrect Response")
    def get_voltage(self, address):
        command = f"$V{address:03d}"
        debug_print(f"Voltage Command: {command}")
        self.send_command(command)
        
        # Wait for acknowledgment
        ack_received = False
        start_time = time.time()
        while not ack_received:
            response = self.read_response()
            if response:
                if response.startswith(f"$V{address:03d}"):
                    ack_received = True
                elif time.time() - start_time > TIMEOUT_SECONDS:
                    raise TimeoutError("Acknowledgment timeout")

        # Wait for the actual response
        start_time = time.time()
        while True:
            response = self.read_response()
            if response:
                if response.startswith(f"#B{address:03d}"):
                    raw_voltage = int(response.split("V")[1][:5])
                    voltage = raw_voltage*15/65536
                    return (voltage)
                elif time.time() - start_time > TIMEOUT_SECONDS:
                    raise TimeoutError("Response timeout")
        
    def ping(self, address):
        water = 1500 # 1500m/s in water
        air = 340
        command = f"$P{address:03d}"
        self.send_command(command)
        
        # Wait for command acknowledgment
        ack = self.read_response()
        if ack is None or not ack.startswith('$P'):
            print("No acknowledgment received")
            return None
        
        # Wait for range response or timeout
        response = self.read_response()
        if response is None:
            debug_print(f"No range response received: {response}")
            return None

        if response.startswith('#R'):
            raw_distance = int(response.split("T")[1])
            sound_velocity = 1500  # 1500m/s in water | 340m/s in air
            c = 0.00003125  # Conversion factor
            distance = raw_distance * sound_velocity * c
            return distance
        elif response.startswith('#TO'):
            debug_print(f"Timeout waiting for a response from the target modem: {response}")
            return None
        else:
            debug_print(f"Unexpected response: {response}")
            return None
        
    def send_unicast_message(self, address, message):
        message_length = len(message)
        command = f"$U{address:03d}{message_length:02d}{message}"
        self.send_command(command)
        debug_print(f"Sending Command: {command}")
        return self.read_response()

    # Modify AESCipher to handle padding correctly and ensure it fits the use case
    class AESCipher:
        def __init__(self, passphrase, iv):
            self.key = self.generate_key(passphrase)
            self.iv = iv

        def generate_key(self, passphrase):
            hashed_passphrase = hashlib.sha256(passphrase.encode()).digest()
            return hashed_passphrase

        def encrypt(self, plaintext):
            debug_print(f"Encrypting plaintext: {plaintext}")
            cipher = aes(self.key, 2, self.iv)  # AES-256-CBC mode
            # Pad plaintext for encryption to make its length a multiple of 16 bytes
            padded_plaintext = plaintext + b'\0' * (16 - len(plaintext) % 16)
            ciphertext = cipher.encrypt(padded_plaintext)
            debug_print(f"Encrypt Cipher Length: {len(ciphertext)}")
            debug_print(f"Ciphertext: {ciphertext}")
            return ciphertext


        def decrypt(self, ciphertext):
            debug_print(f"Decrypting ciphertext: {ciphertext}")
            debug_print(f"Decrypt Cipher Length: {len(ciphertext)}")
            # Check if the ciphertext length is a multiple of 16
            if len(ciphertext) % 16 != 0:
                debug_print("Ciphertext block size is not a multiple of 16 bytes. Skipping decryption.")
                return ciphertext  # Optionally handle this case differently
            cipher = aes(self.key, 2, self.iv)
            decrypted_plaintext = cipher.decrypt(ciphertext)
            debug_print(f"Decrypted plaintext: {decrypted_plaintext}")
            return decrypted_plaintext.rstrip(b'\r\n\0')


# Pass the cipher instance when creating the NM3Driver object
pico = NM3Driver(uart_id=0, baudrate=9600, tx_pin=16, rx_pin=17)
# Now you can proceed with the rest of your operations
pico.connect()
voltage = pico.get_voltage(115)
print(f"Votlage on 115: {voltage}")
address = pico.get_address()
print(f"Address: {address}")
ping = pico.ping(115)
print(f"Distance to 115: {ping}")
#pico.send_unicast_message(169, "Test")
